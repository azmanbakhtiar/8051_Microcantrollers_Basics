C51 COMPILER V9.60.0.0   MAIN                                                              08/01/2022 17:19:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg51.h>
   2          #include "main.h"
   3          #include<intrins.h>   //For using [_nop_()]
   4          
   5          sbit scl=P2^1;
   6          sbit sda=P2^0;
   7          
   8          bit ack;
   9          
  10          char i=0,ii=0,j=0,jj=0,k;
  11          unsigned long Counter=0x70;
  12          unsigned char count_flag=0;
  13          unsigned char Read_var=0x01;
  14          unsigned char message[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
  15          unsigned char values[8];
  16          
  17          
  18          void aknowledge()   //acknowledge condition
  19          {
  20   1        scl=1;
  21   1        _nop_();
  22   1        _nop_();
  23   1        scl=0;
  24   1      } 
  25          
  26          void start()    //start condition
  27          {
  28   1        sda=1;
  29   1        scl=1;
  30   1        _nop_();         //No operation
  31   1        _nop_();
  32   1        sda=0;
  33   1        scl=0;
  34   1      }
  35          
  36          void stop()     //stop condition
  37          {
  38   1        sda=0;
  39   1        scl=1;
  40   1        _nop_();
  41   1        _nop_(); 
  42   1        sda=1;
  43   1        scl=0;
  44   1      }
  45          
  46          void send_byte(unsigned char value) //send byte serially
  47          { 
  48   1      
  49   1        for(i=0;i<8;i++)
  50   1        {
  51   2          sda=value/128;      //extracting MSB
  52   2          value=value<<1;     //shiftng left
  53   2          scl=1;
  54   2          _nop_();
C51 COMPILER V9.60.0.0   MAIN                                                              08/01/2022 17:19:46 PAGE 2   

  55   2          _nop_();
  56   2          scl=0;
  57   2        }
  58   1         ack=sda;         //reading acknowledge
  59   1         sda=0;
  60   1      }
  61          
  62          unsigned char read_byte()     //reading from EEPROM serially
  63          {
  64   1        unsigned long reead=0;
  65   1        sda=1;
  66   1        for(i=0;i<8;i++)
  67   1        {
  68   2          reead=reead<<1;
  69   2          scl=1;
  70   2          _nop_();
  71   2          _nop_();
  72   2          if(sda==1)
  73   2            reead++;
  74   2          scl=0;
  75   2        }
  76   1        sda=0;
  77   1        return reead;       //Returns 8 bit data here
  78   1      } 
  79          
  80          void save(unsigned char Data, unsigned char Add, unsigned char page)          //save in EEPROM
  81          {
  82   1        start();
  83   1        send_byte(0xA0|(page<<1));            //device address
  84   1        aknowledge();
  85   1        send_byte(Add);           //word address
  86   1        aknowledge();
  87   1        send_byte(Data);              //send data
  88   1        aknowledge();
  89   1        stop();   
  90   1        delay(10);  
  91   1      }
  92          unsigned char Read(unsigned char Add, unsigned char page)
  93          {
  94   1        unsigned long Data_var;
  95   1          start();
  96   1        send_byte(0xA0|(page<<1));
  97   1        aknowledge();
  98   1        send_byte(Add);
  99   1        aknowledge();
 100   1        start();
 101   1        send_byte(0xA1|(page<<1));           //device address
 102   1        aknowledge();
 103   1        Data_var=read_byte();
 104   1        stop();
 105   1        delay(10);
 106   1        return Data_var;
 107   1      }
 108          
 109          void delay(unsigned int count)
 110          {
 111   1        int y,z;
 112   1        for(y=0;y<count;y++)
 113   1          for(z=0;z<1275;z++);
 114   1      }
 115          
 116           void timer_init(){
C51 COMPILER V9.60.0.0   MAIN                                                              08/01/2022 17:19:46 PAGE 3   

 117   1         TMOD=0x01;
 118   1        TH0 = 0xF7;
 119   1         TL0 = 0x15;
 120   1         TR0 = 1; /* Start timer */
 121   1         IE = 0x80;
 122   1         ET0=1;
 123   1         TF0=1;
 124   1       }
 125           
 126          void main()
 127          {
 128   1        timer_init();
 129   1        Counter=Read(0,0);
 130   1        display_num_7seg(Counter);
 131   1        while(1)
 132   1        {
 133   2          if(Read_var==0x01)
 134   2          {
 135   3          save(Counter,0,0);
 136   3          delay(10);
 137   3          display_num_7seg(Counter);
 138   3          Read_var=0x00;
 139   3          }
 140   2          else if(Read_var==0x01 && count_flag==1)
 141   2          {
 142   3          save(Counter,1,0);
 143   3          delay(10);
 144   3          display_num_7seg(Counter);
 145   3          Read_var=0x00;
 146   3          }
 147   2        }
 148   1      }
 149          
 150          void display_num_7seg(unsigned char num)
 151          {
 152   1      for(k=2;k>=0;k--)
 153   1       {
 154   2        values[k]=message[num%10];
 155   2         num=num/10;
 156   2       }
 157   1       }
 158           void timer1_interrupt(void) interrupt 1   //ISR 2.5 ms
 159           {
 160   1         TH0 = 0xF0;
 161   1         TL0 = 0x15;
 162   1         P2 |=0x0C;
 163   1         P2 &= ~(jj<<2);
 164   1         P0 = values[jj];
 165   1         jj++;
 166   1         if(jj==3){
 167   2           jj=0;
 168   2           j++;
 169   2           
 170   2         }
 171   1         if(j==10){
 172   2           Counter++;
 173   2           j=0;
 174   2           Read_var=0x01;
 175   2           if(Counter>=256)
 176   2           {
 177   3           count_flag=1;
 178   3           }
C51 COMPILER V9.60.0.0   MAIN                                                              08/01/2022 17:19:46 PAGE 4   

 179   2         }
 180   1      
 181   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    607    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
