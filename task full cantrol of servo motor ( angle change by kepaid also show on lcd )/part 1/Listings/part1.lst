C51 COMPILER V9.60.0.0   PART1                                                             09/14/2022 04:01:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PART1
OBJECT MODULE PLACED IN .\Objects\part1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE part1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\par
                    -t1.lst) TABS(2) OBJECT(.\Objects\part1.obj)

line level    source

   1          #include<reg51.h>
   2          sbit r1=P2^4;
   3          sbit r2=P2^3;
   4          sbit r3=P2^2;
   5          sbit output=P1^0;     //Output to motor
   6          sbit rs = P2^6;
   7          sbit rw = P2^5;
   8          sbit en = P2^7;
   9          sbit btn = P3^0;
  10          sbit btn1 = P3^1;
  11          void values_on_ssd(void);
  12          void display_num_7seg(unsigned char num);
  13          unsigned char values[4];
  14          unsigned char index=0;
  15          unsigned int select[]  =  {0x0C,0x08,0x04,0x00};
  16          void fun(unsigned char x);
  17          void lcd_data(unsigned char item);
  18          void lcd_cmd(unsigned char item);
  19          void lcd_data_int(int time_val) ;
  20          void lcd_DisplayString(char *string_ptr);
  21          unsigned int message[] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67,};
  22          void shape()           // Function to make degree sign
  23          {
  24   1        lcd_cmd(0xC4);
  25   1        lcd_data('D');
  26   1        lcd_data('E');
  27   1        lcd_data('G');
  28   1        lcd_data('R');
  29   1        lcd_data('E');
  30   1        lcd_data('E');
  31   1      
  32   1          
  33   1      }
  34          
  35          void delay(unsigned int msec)   // Function for delay
  36          {
  37   1        int i,j;
  38   1        for(i=0;i<msec;i++)
  39   1          for(j=0;j<1275;j++);
  40   1      } 
  41          
  42          void timer(int msec)   // Function for timer
  43          {
  44   1        int i;
  45   1        TR1=1;
  46   1        for(i=0;i<msec;i++)
  47   1        {
  48   2          while(TF1==0);
  49   2          TF1=0;
  50   2        }
  51   1        TR1=0;
  52   1      }
  53          void main()
  54          {
C51 COMPILER V9.60.0.0   PART1                                                             09/14/2022 04:01:04 PAGE 2   

  55   1        int i,p;
  56   1        char count;
  57   1            lcd_cmd(0x38);
  58   1        lcd_cmd(0x0E);
  59   1        lcd_cmd(0x01);
  60   1        TMOD=0x20;    // Mode2
  61   1        TH1= -23;   
  62   1        output=0;
  63   1        count=21;
  64   1      lcd_DisplayString(" SERVO ANGLE ");
  65   1        shape();
  66   1      while(1)
  67   1        {
  68   2          if(count>=104)
  69   2            count=21;
  70   2          else 
  71   2          {
  72   3            if(btn==0)
  73   3            {count=count+1;}
  74   3            if(btn1==0)
  75   3            {count=count-1;}
  76   3          }
  77   2          lcd_cmd(0xC0);
  78   2          p=2.5*(count-21);
  79   2              lcd_data_int(p);
  80   2          
  81   2          for(i=0;i<50;i++)
  82   2          {
  83   3              
  84   3            output=1;
  85   3            timer(count);    
  86   3            output=0;
  87   3            timer(360);
  88   3            display_num_7seg(p);
  89   3            if(p>180)
  90   3            {p=0;}
  91   3            values_on_ssd();
  92   3          }
  93   2      
  94   2        }
  95   1      }
  96          
  97          void lcd_data_int(int time_val)     // Function to send three digit number
  98          {
  99   1        int a;
 100   1        a = time_val/100;
 101   1          
 102   1        lcd_data(a+48);
 103   1        time_val = time_val%100;
 104   1        a = time_val/10;
 105   1        
 106   1        lcd_data(a+48);
 107   1        a = time_val%10;  
 108   1         
 109   1        lcd_data(a+48);
 110   1      }
 111          
 112          
 113          void lcd_cmd(unsigned char item)    // Function to send command to LCD
 114          {
 115   1        P0 = item;
 116   1        rs= 0;
C51 COMPILER V9.60.0.0   PART1                                                             09/14/2022 04:01:04 PAGE 3   

 117   1        rw=0;
 118   1        en=1;
 119   1        delay(1);
 120   1        en=0;
 121   1        return;
 122   1      } 
 123          
 124          void lcd_data(unsigned char item)   // Function to send one byte data to LCD
 125          {
 126   1        P0 = item;
 127   1        rs= 1;
 128   1        rw=0;
 129   1        en=1;
 130   1        delay(1);
 131   1        en=0;
 132   1      }
 133          void lcd_DisplayString(char *string_ptr)
 134          {
 135   1         while(*string_ptr)
 136   1          lcd_data(*string_ptr++);
 137   1          }
 138           
 139          void display_num_7seg(unsigned char num)
 140          {
 141   1       int i=3;
 142   1       while(num!=0)
 143   1       {
 144   2        values[i]=num%10;
 145   2         num=num/10;
 146   2         i--;
 147   2       }}
 148          void values_on_ssd(void)
 149           {
 150   1        switch(values[index])
 151   1        {
 152   2          case 0:
 153   2             {
 154   3             P2=select[index];
 155   3             P0=message[0]; 
 156   3                             
 157   3             }
 158   2             break;
 159   2          case 1:
 160   2             {
 161   3             P2=select[index];
 162   3             P0=message[1];    
 163   3             }
 164   2             break;
 165   2          case 2:
 166   2             {
 167   3             P2=select[index];
 168   3             P0=message[2];    
 169   3             }
 170   2             break;
 171   2          case 3:
 172   2             {
 173   3              P2=select[index];
 174   3             P0=message[3];    
 175   3             }
 176   2             break;
 177   2          case 4:
 178   2             {
C51 COMPILER V9.60.0.0   PART1                                                             09/14/2022 04:01:04 PAGE 4   

 179   3             P2=select[index];
 180   3             P0=message[4];    
 181   3             }
 182   2             break;
 183   2          case 5:
 184   2             {
 185   3              P2=select[index];
 186   3             P0=message[5];    
 187   3             }
 188   2             break;
 189   2          case 6:
 190   2             {
 191   3              P2=select[index];
 192   3             P0=message[6];    
 193   3             }
 194   2             break;
 195   2          case 7:
 196   2             {
 197   3             P2=select[index];
 198   3             P0=message[7];    
 199   3             }
 200   2             break;
 201   2          case 8:
 202   2             {
 203   3             P2=select[index];
 204   3             P0=message[8];    
 205   3             }
 206   2             break;
 207   2          case 9:
 208   2             {
 209   3             P2=select[index];
 210   3             P0=message[9];    
 211   3             }
 212   2             break;
 213   2        default:
 214   2          break;
 215   2        }
 216   1       index+=1;
 217   1        if(index > 3)
 218   1                {
 219   2                  index=0;
 220   2                }
 221   1              }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    672    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
